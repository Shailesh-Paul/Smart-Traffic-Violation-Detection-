# Smart Traffic Violation Detection 
# Author: Shailesh Kumar

# === 1. Imports ===
import cv2
import numpy as np
import torch
from flask import Flask, render_template, Response

# === 2. Load YOLOv5 Model ===
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')  

# === 3. Initialize Flask App ===
app = Flask(__name__)

# === 4. Define Video Capture and Processing ===
def generate_frames():
    cap = cv2.VideoCapture(0)  
    while True:
        success, frame = cap.read()
        if not success:
            break

        results = model(frame)
        labels, cords = results.xyxyn[0][:, -1], results.xyxyn[0][:, :-1]

        for i in range(len(labels)):
            row = cords[i]
            if row[4] >= 0.3:  # Confidence threshold
                x1, y1, x2, y2 = int(row[0]*frame.shape[1]), int(row[1]*frame.shape[0]), \
                                 int(row[2]*frame.shape[1]), int(row[3]*frame.shape[0])
                cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
                label = f"{model.names[int(labels[i])]}"
                cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36,255,12), 2)

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

# === 5. Define Routes ===
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video')
def video():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

# === 6. Run the App ===
if __name__ == '_main_':
    app.run(debug=True)


